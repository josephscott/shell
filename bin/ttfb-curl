#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

tmpfile=$(mktemp /tmp/ttfb-curl.XXXXXX)

cleanup() {
	trap - SIGINT SIGTERM ERR EXIT
	rm "$tmpfile"
}

# Default number of requests
num_requests=100

# Check if a number of requests is provided as an argument
if [ -n "$1" ] && [[ $1 =~ ^[0-9]+$ ]]; then
  num_requests=$1
  shift # Shift the arguments so that $@ contains the URL and other curl options
fi

echo
for i in $(seq 1 "$num_requests")
do
	printf "\rMaking request %d of %d" "$i" "$num_requests"

	# Generate a random string
	random_string=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 8)

	# Append the random string to the URL
	curl -w "%{time_starttransfer}\n" -s -o /dev/null "$@?rand=$random_string" >> "$tmpfile"
done

sort -o "$tmpfile" "$tmpfile"

min=$(sed '1q;d' "$tmpfile")
p50=$(sed "$((num_requests / 2))q;d" "$tmpfile")
p75=$(sed "$((num_requests * 75 / 100))q;d" "$tmpfile")
p90=$(sed "$((num_requests * 90 / 100))q;d" "$tmpfile")
p95=$(sed "$((num_requests * 95 / 100))q;d" "$tmpfile")
p99=$(sed "$((num_requests * 99 / 100))q;d" "$tmpfile")
max=$(sed "${num_requests}q;d" "$tmpfile")

avg=$(awk '{ sum += $1 } END { print( sum / NR ) }' "$tmpfile")

stddev=$(awk '
{
	sum += $1;
	sumsq += $1 * $1
} END {
	print sqrt( sumsq / NR - ( sum / NR ) ** 2 )
}' "$tmpfile")

echo
echo
echo "*** TTFB of $num_requests requests, in seconds ***"
echo
echo "min    = $min"
echo "avg    = $avg"
echo "max    = $max"
echo "stddev = $stddev"
echo
echo "p50 = $p50"
echo "p75 = $p75"
echo "p90 = $p90"
echo "p95 = $p95"
echo "p99 = $p99"
echo

echo "*** Buckets ***"
echo
awk -v size=0.1 '
BEGIN { delta = ( delta == "" ? 0.1 : delta ) }
{
	bucketNr = int( ( $0 + delta ) / delta )
	cnt[bucketNr]++
	numBuckets = (numBuckets > bucketNr ? numBuckets : bucketNr)
}
END {
	for ( bucketNr=1; bucketNr <= numBuckets; bucketNr++ ) {
		end = beg + delta
		printf "| %0.1f -> %0.1f = %d\n", beg, end, cnt[bucketNr]
		beg = end
	}
}' "$tmpfile"

echo

cleanup
